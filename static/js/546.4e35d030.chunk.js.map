{"version":3,"file":"static/js/546.4e35d030.chunk.js","mappings":"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","sources":["features/notes/NotesForm.tsx","features/photos/firebasePhotos.ts","pages/EditNotePage.tsx"],"sourcesContent":["import { Card, Form, Button, Input, DatePicker, Typography, TimePicker, InputNumber, Upload, message, Image } from 'antd';\r\nimport { DeleteOutlined, PlusOutlined, LoadingOutlined, EditOutlined } from '@ant-design/icons';\r\nimport React, { useState, useMemo } from 'react'\r\n\r\nimport { Note } from './notesApiSlice';\r\nimport { Todo } from './../todos/todosApiSlice'\r\nimport { Activity } from './../activities/activitiesApiSlice'\r\n\r\nimport type { UploadChangeParam } from 'antd/es/upload';\r\nimport type { RcFile, UploadFile, UploadProps } from 'antd/es/upload/interface';\r\n\r\nimport moment from 'moment';\r\nimport { firebaseUploadPhoto } from '../photos/firebasePhotos';\r\n\r\n\r\n\r\nconst { Title, Text } = Typography\r\nconst { Dragger } = Upload;\r\n\r\ntype NotesFormProps = {\r\n   onFinish: (values: any) => void,\r\n   onDeleteNoteClick?: (noteId: string) => Promise<void>,\r\n   onBackClick?: (prevUrl: string | undefined, currentUrl: string | undefined, path: string | undefined) => Promise<void>,\r\n   note?: Note,\r\n   todos?: Todo[],\r\n   activities?: Activity[],\r\n   formAction: string,\r\n}\r\n\r\nconst NotesForm = ({ onFinish, note, todos, activities, formAction, onDeleteNoteClick, onBackClick }: NotesFormProps) => {\r\n\r\n   const [imageUrl, setimageUrl] = useState<string | undefined>(note?.imageUrl)\r\n   const [loading, setLoading] = useState<boolean>(false);\r\n\r\n   const createInitialValues = () => {\r\n      if (note) {\r\n         return {\r\n            ...note,\r\n            date: moment(note.noteDateString, 'DD/MM/YYYY'),\r\n            todos: todos?.map(todo => todo),\r\n            activities: activities?.map(act => {\r\n               const activityFormValues = {\r\n                  ...act,\r\n                  endSleep: moment(act.endSleep, 'HH:mm'),\r\n                  eatTime: moment(act.eatTime, \"HH:mm\"),\r\n                  startSleep: moment(act.startSleep, 'HH:mm'),\r\n               }\r\n\r\n               return activityFormValues\r\n            })\r\n         }\r\n      } else return undefined\r\n   }\r\n\r\n   const beforeUpload = (file: RcFile) => {\r\n      const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n      if (!isJpgOrPng) {\r\n         message.error('Вы можете загружать только изображения формата JPG/PNG!');\r\n      }\r\n      const isLt6M = file.size / 1024 / 1024 < 6;\r\n      if (!isLt6M) {\r\n         message.error('Размер картинки превышает 6MB!');\r\n      }\r\n      return isJpgOrPng && isLt6M;\r\n   };\r\n\r\n   const handleChange: UploadProps['onChange'] = async (info: UploadChangeParam<UploadFile>) => {\r\n\r\n      if (info.file.status === 'uploading') {\r\n         setLoading(true);\r\n         return;\r\n      }\r\n      if (info.file.status === 'done') {\r\n         setLoading(false)\r\n      }\r\n   };\r\n\r\n   const normFile = (e: any) => {\r\n      return e?.file.response;\r\n   };\r\n\r\n   const uploadButton = (\r\n      <div>\r\n         {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n         <div style={{ marginTop: 8 }}>Загрузить</div>\r\n      </div>\r\n   );\r\n\r\n   const cardActions = useMemo((): React.ReactNode[] | undefined =>\r\n      formAction === 'edit'\r\n         ?\r\n         [<div className='card-actionsWrapper'\r\n            onClick={() => {\r\n               if (note && onDeleteNoteClick) {\r\n                  onDeleteNoteClick(note.noteId)\r\n               }\r\n            }}\r\n         >\r\n            <DeleteOutlined key=\"delete\" />\r\n            <Text>Удалить</Text>\r\n         </div>,\r\n         <div className='card-actionsWrapper'\r\n            onClick={() => {\r\n               if (note && onBackClick) onBackClick(note.imageUrl, imageUrl, note?.imagePath)\r\n            }}\r\n         >\r\n            <EditOutlined key=\"edit\" />\r\n            <Text>Назад</Text>\r\n         </div>,\r\n         ]\r\n         :\r\n         undefined,\r\n      [formAction])\r\n\r\n   return (\r\n      <Card\r\n         hoverable={true}\r\n         bordered={false}\r\n         style={{\r\n            width: '100%',\r\n         }}\r\n         actions={cardActions}\r\n         title={formAction === 'edit' ? 'Отредактируйте заметку' : 'Добавить заметку'}\r\n      >\r\n         <Form\r\n            onFinish={onFinish}\r\n            initialValues={(createInitialValues())}\r\n         >\r\n            <Form.Item name={\"title\"} rules={[{ required: true, message: 'Обязательное поле!' }]}>\r\n               <Input placeholder=\"Введите заголовок\" />\r\n            </Form.Item>\r\n            <Form.Item name={\"date\"} rules={[{ required: true, message: 'Обязательное поле!' }]}>\r\n               <DatePicker\r\n                  placeholder=\"Введите дату поста\"\r\n                  onChange={() => { }}\r\n                  format='DD/MM/YYYY'\r\n                  style={{ width: '100%' }} />\r\n            </Form.Item>\r\n            <Form.Item name={\"text\"} rules={[{ required: true, message: 'Обязательное поле!' }]}>\r\n               <Input.TextArea placeholder=\"Введите текст\" />\r\n            </Form.Item>\r\n            <Form.Item name='dragger' valuePropName='file' getValueFromEvent={normFile}>\r\n               <Dragger\r\n                  multiple={false}\r\n                  showUploadList={false}\r\n                  beforeUpload={beforeUpload}\r\n                  onChange={handleChange}\r\n                  customRequest={async ({ onError, onSuccess, file, filename }) => {\r\n                     const fileToUpload = file as RcFile\r\n                     const url = await firebaseUploadPhoto(fileToUpload, `${fileToUpload.uid}`)\r\n                     if (onSuccess && url) onSuccess({ url, filePath: fileToUpload.uid })\r\n                     setimageUrl(url)\r\n                  }}\r\n               >\r\n                  {imageUrl ? <Image preview={false} src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n               </Dragger>\r\n            </Form.Item>\r\n\r\n            <Title level={4} className='card-title'>Список дел:</Title>\r\n            <Form.List name=\"todos\">\r\n               {(fields, { add, remove }, { errors }) => (\r\n                  <>\r\n                     {fields.map((field, index) => (\r\n                        <Form.Item\r\n                           label={index + 1}\r\n                           required={false}\r\n                           key={field.key}\r\n                        >\r\n                           <Form.Item\r\n                              {...field}\r\n                              name={[field.name, 'text']}\r\n                              validateTrigger={['onChange', 'onBlur']}\r\n                              rules={[\r\n                                 {\r\n                                    required: true,\r\n                                    whitespace: true,\r\n                                    message: \"Введите задачу или удалите поле\",\r\n                                 },\r\n                              ]}\r\n                              noStyle\r\n                           >\r\n                              <Input placeholder=\"Что нужно сделать\" style={{ width: '80%' }} />\r\n                           </Form.Item>\r\n                           {fields.length >= 1 ? (\r\n                              <DeleteOutlined\r\n                                 style={{ marginLeft: \"1rem\", fontSize: '1.2rem' }}\r\n                                 onClick={() => remove(field.name)}\r\n                              />\r\n                           ) : null}\r\n                        </Form.Item>\r\n                     ))}\r\n                     <Form.Item>\r\n                        <Button\r\n                           type=\"dashed\"\r\n                           onClick={() => add()}\r\n                           style={{ width: '60%' }}\r\n                           icon={<PlusOutlined />}\r\n                        >\r\n                           Добавить\r\n                        </Button>\r\n                        <Button\r\n                           type=\"dashed\"\r\n                           onClick={() => {\r\n                              add('', 0);\r\n                           }}\r\n                           style={{ width: '80%', marginTop: '20px' }}\r\n                           icon={<PlusOutlined />}\r\n                        >\r\n                           Добавить в начало списка\r\n                        </Button>\r\n                        <Form.ErrorList errors={errors} />\r\n                     </Form.Item>\r\n                  </>\r\n               )}\r\n            </Form.List>\r\n            <Title level={4} className='card-title'>Активность:</Title>\r\n            <Form.List name=\"activities\">\r\n               {(fields, { add, remove }) => (\r\n                  <>\r\n                     {fields.map(field => (\r\n                        <>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Проснулся\"\r\n                              name={[field.name, 'endSleep']}\r\n                           >\r\n                              <TimePicker format={'HH:mm'} placeholder='Введите время' showNow={false} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Поел\"\r\n                              name={[field.name, 'eatTime']}\r\n                           >\r\n                              <TimePicker format={'HH:mm'} placeholder='Введите время' showNow={false} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Сколько поел\"\r\n                              name={[field.name, 'eatAmount']}\r\n                           >\r\n                              <InputNumber min={0} step={10} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Уснул\"\r\n                              name={[field.name, 'startSleep']}\r\n                           >\r\n                              <TimePicker format={'HH:mm'} placeholder='Введите время' showNow={false} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n\r\n                           <DeleteOutlined style={{ fontSize: '1.2rem', margin: '0 0 1rem 0' }} onClick={() => remove(field.name)} />\r\n                        </>\r\n                     ))}\r\n\r\n                     <Form.Item>\r\n                        <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                           Добавить активность\r\n                        </Button>\r\n                     </Form.Item>\r\n                  </>\r\n               )}\r\n            </Form.List>\r\n            <Form.Item>\r\n               <Button type=\"primary\" htmlType=\"submit\">\r\n                  {formAction === 'edit' ? 'Сохранить изменения' : 'Добавить'}\r\n               </Button>\r\n            </Form.Item>\r\n         </Form >\r\n      </Card >\r\n   )\r\n}\r\n\r\nexport default NotesForm","import {\r\n   ref,\r\n   uploadBytes,\r\n   getDownloadURL,\r\n   listAll,\r\n   list,\r\n   deleteObject,\r\n} from \"firebase/storage\";\r\nimport { storage } from \"./../../firebase\";\r\n\r\nexport const firebaseUploadPhoto = async (file: any, url: string) => {\r\n   const imageRef = ref(storage, url);\r\n   return await uploadBytes(imageRef, file).then((snapshot) => {\r\n      const downloadUrl = getDownloadURL(snapshot.ref).then((url) => url);\r\n      return downloadUrl\r\n   })\r\n}\r\n\r\nexport const firebaseDeletePhoto = async (path: string) => {\r\n   deleteObject(ref(storage, `images/${path}`)).then(() => {\r\n      console.log(\"// File deleted successfully\")\r\n   }).catch((error) => {\r\n      console.log(\"// Uh-oh, an error occurred!\")\r\n   });\r\n}","import React, { useCallback, useMemo } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useAppSelector } from '../app/hooks'\r\nimport { Note, selectNoteById, useDeleteNoteMutation, useUpdateNoteMutation } from '../features/notes/notesApiSlice'\r\nimport { Col, Row, Typography } from 'antd';\r\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport { selectActivitiesByNoteId, useAddActivityMutation, useDeleteActivityMutation, useUpdateActivityMutation } from '../features/activities/activitiesApiSlice';\r\nimport { selectTodosByNoteId, useAddTodoMutation, useDeleteTodoMutation, useUpdateTodoMutation } from '../features/todos/todosApiSlice';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport NotesForm from '../features/notes/NotesForm';\r\nimport { firebaseDeletePhoto } from '../features/photos/firebasePhotos';\r\n\r\nconst { Paragraph, Text } = Typography\r\n\r\n\r\nconst EditNotePage: React.FC = () => {\r\n\r\n   const { noteId } = useParams()\r\n\r\n   const note = useAppSelector((state) => {\r\n      if (noteId) return selectNoteById(state, noteId)\r\n   })\r\n\r\n   const todos = useAppSelector((state) => {\r\n      if (note) return selectTodosByNoteId(state, note.noteId)\r\n   })\r\n   const activities = useAppSelector((state) => {\r\n      if (note) return selectActivitiesByNoteId(state, note.noteId)\r\n   })\r\n\r\n   const navigate = useNavigate()\r\n\r\n   const [deleteNote] = useDeleteNoteMutation()\r\n   const [updateNote] = useUpdateNoteMutation()\r\n\r\n   const [addTodo] = useAddTodoMutation()\r\n   const [updateTodo] = useUpdateTodoMutation()\r\n   const [deleteTodo] = useDeleteTodoMutation()\r\n\r\n   const [addActivity] = useAddActivityMutation()\r\n   const [updateActivity] = useUpdateActivityMutation()\r\n   const [deleteActivity] = useDeleteActivityMutation()\r\n\r\n   const userId = useAppSelector((state) => state.auth.userId)\r\n\r\n   const onDeleteNoteClick = useCallback(async (noteId: string) => {\r\n      if (userId) await deleteNote({ userId, noteId })\r\n      if (todos) await Promise.all(todos.map(todo => deleteTodo({ userId, todoId: todo.todoId })))\r\n      if (activities) await Promise.all(activities.map(act => deleteActivity({ userId, activityId: act.id })))\r\n      navigate(-1)\r\n   }, [userId, noteId])\r\n\r\n   const onBackClick = useCallback(async (prevUrl: string | undefined, currentUrl: string | undefined, path: string | undefined) => {\r\n      if (prevUrl && currentUrl && prevUrl !== currentUrl && path) await firebaseDeletePhoto(path);\r\n      navigate(-1)\r\n   }, [])\r\n\r\n   const onFinish = useCallback(async (values: any) => {\r\n      if (userId) {\r\n         const updatedNote = {\r\n            title: values.title,\r\n            text: values.text,\r\n            noteDateString: values.date.format('DD/MM/YYYY'),\r\n            noteId,\r\n            imageUrl: values.dragger.url,\r\n            imagePath: values.dragger.filePath\r\n         } as Note\r\n         await updateNote({ userId, updatedNote })\r\n         if (values.todos) {\r\n            await Promise.all(values.todos.map((todo: any) => {\r\n               if (!todo.todoId) {\r\n                  const newTodo = {\r\n                     todoId: `Todo_${nanoid()}`,\r\n                     noteId: noteId,\r\n                     text: todo.text\r\n                  }\r\n                  addTodo({ userId, newTodo })\r\n               } else {\r\n                  updateTodo({ userId, todo })\r\n               }\r\n            }))\r\n            if (todos) {\r\n               await Promise.all(todos.map((prevTodo) => {\r\n                  const findTodo = values.todos.find((todo: any) => todo.todoId = prevTodo.todoId)\r\n                  if (!findTodo) deleteTodo({ userId, id: prevTodo.todoId })\r\n               }))\r\n            }\r\n         }\r\n         if (values.activities) {\r\n            await Promise.all(values.activities.map((activity: any) => {\r\n               if (!activity.id) {\r\n                  const newActivity = {\r\n                     id: `Activity_${nanoid()}`,\r\n                     noteId: noteId,\r\n                     eatTime: activity.eatTime.format('HH:mm'),\r\n                     endSleep: activity.endSleep.format('HH:mm'),\r\n                     startSleep: activity.startSleep.format('HH:mm'),\r\n                     eatAmount: activity.eatAmount\r\n                  }\r\n                  addActivity({ userId, newActivity })\r\n               } else {\r\n                  const updatedActivity = {\r\n                     ...activity,\r\n                     eatTime: activity.eatTime.format('HH:mm'),\r\n                     endSleep: activity.endSleep.format('HH:mm'),\r\n                     startSleep: activity.startSleep.format('HH:mm'),\r\n                  }\r\n                  updateActivity({ userId, updatedActivity })\r\n               }\r\n            }))\r\n            if (activities) {\r\n               await Promise.all(activities.map((prevAct) => {\r\n                  const findTodo = values.activities.find((act: any) => act.id = prevAct.id)\r\n                  if (!findTodo) deleteActivity({ userId, id: prevAct.id })\r\n               }))\r\n            }\r\n         }\r\n         navigate(-1)\r\n      }\r\n   }, [])\r\n\r\n   let content = note\r\n      ? <NotesForm\r\n         onFinish={onFinish}\r\n         note={note}\r\n         todos={todos}\r\n         activities={activities}\r\n         formAction='edit'\r\n         onDeleteNoteClick={onDeleteNoteClick}\r\n         onBackClick={onBackClick}\r\n      />\r\n      : <Paragraph style={{ textAlign: 'center' }}><Text type='secondary' strong>Запись не найдена!</Text></Paragraph>\r\n\r\n   return (\r\n      <Row justify='center' align='middle' className='mh100 formWrapperPadding'>\r\n         <Col xs={24} md={12}>{content}</Col>\r\n      </Row>\r\n   )\r\n}\r\n\r\nexport default EditNotePage"],"names":["Title","Typography","Text","Dragger","Upload","onFinish","note","todos","activities","formAction","onDeleteNoteClick","onBackClick","useState","imageUrl","setimageUrl","loading","setLoading","handleChange","info","file","status","uploadButton","style","marginTop","cardActions","useMemo","className","onClick","noteId","imagePath","undefined","hoverable","bordered","width","actions","title","initialValues","date","moment","noteDateString","map","todo","act","endSleep","eatTime","startSleep","name","rules","required","message","placeholder","onChange","format","valuePropName","getValueFromEvent","e","response","multiple","showUploadList","beforeUpload","isJpgOrPng","type","isLt6M","size","customRequest","onError","onSuccess","filename","fileToUpload","firebaseUploadPhoto","uid","url","filePath","preview","src","alt","level","fields","add","remove","errors","field","index","label","validateTrigger","whitespace","noStyle","length","marginLeft","fontSize","key","icon","showNow","min","step","margin","block","htmlType","imageRef","ref","storage","uploadBytes","then","snapshot","downloadUrl","getDownloadURL","firebaseDeletePhoto","path","deleteObject","console","log","catch","error","Paragraph","useParams","useAppSelector","state","selectNoteById","selectTodosByNoteId","selectActivitiesByNoteId","navigate","useNavigate","useDeleteNoteMutation","deleteNote","useUpdateNoteMutation","updateNote","useAddTodoMutation","addTodo","useUpdateTodoMutation","updateTodo","useDeleteTodoMutation","deleteTodo","useAddActivityMutation","addActivity","useUpdateActivityMutation","updateActivity","useDeleteActivityMutation","deleteActivity","userId","auth","useCallback","Promise","all","todoId","activityId","id","prevUrl","currentUrl","values","updatedNote","text","dragger","newTodo","nanoid","prevTodo","find","activity","updatedActivity","newActivity","eatAmount","prevAct","content","textAlign","strong","justify","align","xs","md"],"sourceRoot":""}