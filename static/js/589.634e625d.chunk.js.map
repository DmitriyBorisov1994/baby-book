{"version":3,"file":"static/js/589.634e625d.chunk.js","mappings":"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","sources":["features/notes/NotesForm.tsx","pages/AddNotePage.tsx"],"sourcesContent":["import { Card, Form, Button, Input, DatePicker, Typography, TimePicker, InputNumber } from 'antd';\r\nimport { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport React from 'react'\r\n\r\nimport { Note } from './notesApiSlice';\r\nimport { Todo } from './../todos/todosApiSlice'\r\nimport { Activity } from './../activities/activitiesApiSlice'\r\n\r\nimport moment from 'moment';\r\n\r\nconst { Title } = Typography\r\n\r\ntype NotesFormProps = {\r\n   onFinish: (values: any) => void\r\n   note?: Note,\r\n   todos?: Todo[],\r\n   activities?: Activity[],\r\n   cardActions?: React.ReactNode[],\r\n   cardTitle: string,\r\n   submitBtnText: string\r\n}\r\n\r\nconst NotesForm = ({ onFinish, note, todos, activities, cardActions, cardTitle, submitBtnText }: NotesFormProps) => {\r\n   const createInitialValues = () => {\r\n      if (note) {\r\n         return {\r\n            ...note,\r\n            date: moment(note.noteDateString, 'DD/MM/YYYY'),\r\n            todos: todos?.map(todo => todo),\r\n            activities: activities?.map(act => {\r\n               const activityFormValues = {\r\n                  ...act,\r\n                  endSleep: moment(act.endSleep, 'HH:mm'),\r\n                  eatTime: moment(act.eatTime, \"HH:mm\"),\r\n                  startSleep: moment(act.startSleep, 'HH:mm'),\r\n               }\r\n\r\n               return activityFormValues\r\n            })\r\n         }\r\n      } else return undefined\r\n   }\r\n\r\n   return (\r\n      <Card\r\n         hoverable={true}\r\n         bordered={false}\r\n         style={{\r\n            width: '100%',\r\n         }}\r\n         actions={cardActions}\r\n         title={cardTitle}\r\n      >\r\n         <Form\r\n            onFinish={onFinish}\r\n            initialValues={(createInitialValues())}\r\n         >\r\n            <Form.Item name={\"title\"} rules={[{ required: true, message: 'Обязательное поле!' }]}>\r\n               <Input placeholder=\"Введите заголовок\" />\r\n            </Form.Item>\r\n            <Form.Item name={\"date\"} rules={[{ required: true, message: 'Обязательное поле!' }]}>\r\n               <DatePicker\r\n                  placeholder=\"Введите дату поста\"\r\n                  onChange={() => { }}\r\n                  format='DD/MM/YYYY'\r\n                  style={{ width: '100%' }} />\r\n            </Form.Item>\r\n            <Form.Item name={\"text\"} rules={[{ required: true, message: 'Обязательное поле!' }]}>\r\n               <Input.TextArea placeholder=\"Введите текст\" />\r\n            </Form.Item>\r\n            {/*<Title level={4} className='card-title'>Фото:</Title>\r\n            <PhotoUploader onSetPhoto={onSetPhoto} url={photoUrls[0]} />*/}\r\n            <Title level={4} className='card-title'>Список дел:</Title>\r\n            <Form.List name=\"todos\">\r\n               {(fields, { add, remove }, { errors }) => (\r\n                  <>\r\n                     {fields.map((field, index) => (\r\n                        <Form.Item\r\n                           label={index + 1}\r\n                           required={false}\r\n                           key={field.key}\r\n                        >\r\n                           <Form.Item\r\n                              {...field}\r\n                              name={[field.name, 'text']}\r\n                              validateTrigger={['onChange', 'onBlur']}\r\n                              rules={[\r\n                                 {\r\n                                    required: true,\r\n                                    whitespace: true,\r\n                                    message: \"Введите задачу или удалите поле\",\r\n                                 },\r\n                              ]}\r\n                              noStyle\r\n                           >\r\n                              <Input placeholder=\"Что нужно сделать\" style={{ width: '80%' }} />\r\n                           </Form.Item>\r\n                           {fields.length >= 1 ? (\r\n                              <DeleteOutlined\r\n                                 style={{ marginLeft: \"1rem\", fontSize: '1.2rem' }}\r\n                                 onClick={() => remove(field.name)}\r\n                              />\r\n                           ) : null}\r\n                        </Form.Item>\r\n                     ))}\r\n                     <Form.Item>\r\n                        <Button\r\n                           type=\"dashed\"\r\n                           onClick={() => add()}\r\n                           style={{ width: '60%' }}\r\n                           icon={<PlusOutlined />}\r\n                        >\r\n                           Добавить\r\n                        </Button>\r\n                        <Button\r\n                           type=\"dashed\"\r\n                           onClick={() => {\r\n                              add('', 0);\r\n                           }}\r\n                           style={{ width: '80%', marginTop: '20px' }}\r\n                           icon={<PlusOutlined />}\r\n                        >\r\n                           Добавить в начало списка\r\n                        </Button>\r\n                        <Form.ErrorList errors={errors} />\r\n                     </Form.Item>\r\n                  </>\r\n               )}\r\n            </Form.List>\r\n            <Title level={4} className='card-title'>Активность:</Title>\r\n            <Form.List name=\"activities\">\r\n               {(fields, { add, remove }) => (\r\n                  <>\r\n                     {fields.map(field => (\r\n                        <>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Проснулся\"\r\n                              name={[field.name, 'endSleep']}\r\n                           >\r\n                              <TimePicker format={'HH:mm'} placeholder='Введите время' showNow={false} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Поел\"\r\n                              name={[field.name, 'eatTime']}\r\n                           >\r\n                              <TimePicker format={'HH:mm'} placeholder='Введите время' showNow={false} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Сколько поел\"\r\n                              name={[field.name, 'eatAmount']}\r\n                           >\r\n                              <InputNumber min={0} step={10} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Уснул\"\r\n                              name={[field.name, 'startSleep']}\r\n                           >\r\n                              <TimePicker format={'HH:mm'} placeholder='Введите время' showNow={false} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n\r\n                           <DeleteOutlined style={{ fontSize: '1.2rem', margin: '0 0 1rem 0' }} onClick={() => remove(field.name)} />\r\n                        </>\r\n                     ))}\r\n\r\n                     <Form.Item>\r\n                        <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                           Добавить активность\r\n                        </Button>\r\n                     </Form.Item>\r\n                  </>\r\n               )}\r\n            </Form.List>\r\n            <Form.Item>\r\n               <Button type=\"primary\" htmlType=\"submit\">\r\n                  {submitBtnText}\r\n               </Button>\r\n            </Form.Item>\r\n         </Form >\r\n      </Card >\r\n   )\r\n}\r\n\r\nexport default NotesForm","import React, { useCallback } from 'react'\r\nimport { Row, Col } from 'antd'\r\nimport NotesForm from '../features/notes/NotesForm'\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { useAppSelector } from '../app/hooks';\r\nimport { useAddNoteMutation } from '../features/notes/notesApiSlice';\r\nimport { useAddTodoMutation } from '../features/todos/todosApiSlice';\r\nimport { useAddActivityMutation } from '../features/activities/activitiesApiSlice';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n\r\nconst AddNotePage = () => {\r\n\r\n   const userId = useAppSelector((state) => state.auth.userId)\r\n   const navigate = useNavigate()\r\n\r\n   const [addNote] = useAddNoteMutation()\r\n   const [addTodo] = useAddTodoMutation()\r\n   const [addActivity] = useAddActivityMutation()\r\n\r\n   const onFinish = useCallback(async (values: any) => {\r\n      if (userId) {\r\n         const noteId = `Note_${nanoid()}`\r\n         /*if (photo) {\r\n            firebaseUploadPhoto(photo, noteId)\r\n         }*/\r\n         const newNote = {\r\n            title: values.title,\r\n            text: values.text,\r\n            noteDateString: values.date.format('DD/MM/YYYY'),\r\n            noteId\r\n         }\r\n         await addNote({ userId, newNote })\r\n         if (values.todos) {\r\n            await Promise.all(values.todos.map((todo: any) => {\r\n               const newTodo = {\r\n                  todoId: `Todo_${nanoid()}`,\r\n                  noteId: noteId,\r\n                  text: todo\r\n               }\r\n               addTodo({ userId, newTodo })\r\n            }))\r\n         }\r\n         if (values.activities) {\r\n            await Promise.all(values.activities.map((activity: any) => {\r\n               const newActivity = {\r\n                  id: `Activity_${nanoid()}`,\r\n                  noteId: noteId,\r\n                  eatTime: activity.eatTime.format('HH:mm'),\r\n                  endSleep: activity.endSleep.format('HH:mm'),\r\n                  startSleep: activity.startSleep.format('HH:mm'),\r\n                  eatAmount: activity.eatAmount\r\n               }\r\n               addActivity({ userId, newActivity })\r\n            }))\r\n         }\r\n         navigate(-1)\r\n      }\r\n   }, [])\r\n\r\n   return (\r\n      <Row justify='center' align='middle' className='mh100 formWrapperPadding'>\r\n         <Col xs={24} md={12}><NotesForm onFinish={onFinish} cardTitle={'Добавить новую заметку'} submitBtnText='Добавить' /></Col>\r\n      </Row>\r\n   )\r\n}\r\n\r\nexport default AddNotePage"],"names":["Title","Typography","onFinish","note","todos","activities","cardActions","cardTitle","submitBtnText","hoverable","bordered","style","width","actions","title","initialValues","date","moment","noteDateString","map","todo","act","endSleep","eatTime","startSleep","name","rules","required","message","placeholder","onChange","format","level","className","fields","add","remove","errors","field","index","label","validateTrigger","whitespace","noStyle","length","marginLeft","fontSize","onClick","key","type","icon","marginTop","showNow","min","step","margin","block","htmlType","userId","useAppSelector","state","auth","navigate","useNavigate","useAddNoteMutation","addNote","useAddTodoMutation","addTodo","useAddActivityMutation","addActivity","useCallback","values","noteId","nanoid","newNote","text","Promise","all","newTodo","todoId","activity","newActivity","id","eatAmount","justify","align","xs","md"],"sourceRoot":""}