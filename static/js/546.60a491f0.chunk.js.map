{"version":3,"file":"static/js/546.60a491f0.chunk.js","mappings":"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","sources":["features/notes/NotesForm.tsx","pages/EditNotePage.tsx"],"sourcesContent":["import { Card, Form, Button, Input, DatePicker, Typography, TimePicker, InputNumber } from 'antd';\r\nimport { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport React from 'react'\r\n\r\nimport { Note } from './notesApiSlice';\r\nimport { Todo } from './../todos/todosApiSlice'\r\nimport { Activity } from './../activities/activitiesApiSlice'\r\n\r\nimport moment from 'moment';\r\n\r\nconst { Title } = Typography\r\n\r\ntype NotesFormProps = {\r\n   onFinish: (values: any) => void\r\n   note?: Note,\r\n   todos?: Todo[],\r\n   activities?: Activity[],\r\n   cardActions?: React.ReactNode[],\r\n   cardTitle: string,\r\n   submitBtnText: string\r\n}\r\n\r\nconst NotesForm = ({ onFinish, note, todos, activities, cardActions, cardTitle, submitBtnText }: NotesFormProps) => {\r\n   const createInitialValues = () => {\r\n      if (note) {\r\n         return {\r\n            ...note,\r\n            date: moment(note.noteDateString, 'DD/MM/YYYY'),\r\n            todos: todos?.map(todo => todo),\r\n            activities: activities?.map(act => {\r\n               const activityFormValues = {\r\n                  ...act,\r\n                  endSleep: moment(act.endSleep, 'HH:mm'),\r\n                  eatTime: moment(act.eatTime, \"HH:mm\"),\r\n                  startSleep: moment(act.startSleep, 'HH:mm'),\r\n               }\r\n\r\n               return activityFormValues\r\n            })\r\n         }\r\n      } else return undefined\r\n   }\r\n\r\n   return (\r\n      <Card\r\n         hoverable={true}\r\n         bordered={false}\r\n         style={{\r\n            width: '100%',\r\n         }}\r\n         actions={cardActions}\r\n         title={cardTitle}\r\n      >\r\n         <Form\r\n            onFinish={onFinish}\r\n            initialValues={(createInitialValues())}\r\n         >\r\n            <Form.Item name={\"title\"} rules={[{ required: true, message: 'Обязательное поле!' }]}>\r\n               <Input placeholder=\"Введите заголовок\" />\r\n            </Form.Item>\r\n            <Form.Item name={\"date\"} rules={[{ required: true, message: 'Обязательное поле!' }]}>\r\n               <DatePicker\r\n                  placeholder=\"Введите дату поста\"\r\n                  onChange={() => { }}\r\n                  format='DD/MM/YYYY'\r\n                  style={{ width: '100%' }} />\r\n            </Form.Item>\r\n            <Form.Item name={\"text\"} rules={[{ required: true, message: 'Обязательное поле!' }]}>\r\n               <Input.TextArea placeholder=\"Введите текст\" />\r\n            </Form.Item>\r\n            {/*<Title level={4} className='card-title'>Фото:</Title>\r\n            <PhotoUploader onSetPhoto={onSetPhoto} url={photoUrls[0]} />*/}\r\n            <Title level={4} className='card-title'>Список дел:</Title>\r\n            <Form.List name=\"todos\">\r\n               {(fields, { add, remove }, { errors }) => (\r\n                  <>\r\n                     {fields.map((field, index) => (\r\n                        <Form.Item\r\n                           label={index + 1}\r\n                           required={false}\r\n                           key={field.key}\r\n                        >\r\n                           <Form.Item\r\n                              {...field}\r\n                              name={[field.name, 'text']}\r\n                              validateTrigger={['onChange', 'onBlur']}\r\n                              rules={[\r\n                                 {\r\n                                    required: true,\r\n                                    whitespace: true,\r\n                                    message: \"Введите задачу или удалите поле\",\r\n                                 },\r\n                              ]}\r\n                              noStyle\r\n                           >\r\n                              <Input placeholder=\"Что нужно сделать\" style={{ width: '80%' }} />\r\n                           </Form.Item>\r\n                           {fields.length >= 1 ? (\r\n                              <DeleteOutlined\r\n                                 style={{ marginLeft: \"1rem\", fontSize: '1.2rem' }}\r\n                                 onClick={() => remove(field.name)}\r\n                              />\r\n                           ) : null}\r\n                        </Form.Item>\r\n                     ))}\r\n                     <Form.Item>\r\n                        <Button\r\n                           type=\"dashed\"\r\n                           onClick={() => add()}\r\n                           style={{ width: '60%' }}\r\n                           icon={<PlusOutlined />}\r\n                        >\r\n                           Добавить\r\n                        </Button>\r\n                        <Button\r\n                           type=\"dashed\"\r\n                           onClick={() => {\r\n                              add('', 0);\r\n                           }}\r\n                           style={{ width: '80%', marginTop: '20px' }}\r\n                           icon={<PlusOutlined />}\r\n                        >\r\n                           Добавить в начало списка\r\n                        </Button>\r\n                        <Form.ErrorList errors={errors} />\r\n                     </Form.Item>\r\n                  </>\r\n               )}\r\n            </Form.List>\r\n            <Title level={4} className='card-title'>Активность:</Title>\r\n            <Form.List name=\"activities\">\r\n               {(fields, { add, remove }) => (\r\n                  <>\r\n                     {fields.map(field => (\r\n                        <>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Проснулся\"\r\n                              name={[field.name, 'endSleep']}\r\n                           >\r\n                              <TimePicker format={'HH:mm'} placeholder='Введите время' showNow={false} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Поел\"\r\n                              name={[field.name, 'eatTime']}\r\n                           >\r\n                              <TimePicker format={'HH:mm'} placeholder='Введите время' showNow={false} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Сколько поел\"\r\n                              name={[field.name, 'eatAmount']}\r\n                           >\r\n                              <InputNumber min={0} step={10} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n                           <Form.Item\r\n                              {...field}\r\n                              label=\"Уснул\"\r\n                              name={[field.name, 'startSleep']}\r\n                           >\r\n                              <TimePicker format={'HH:mm'} placeholder='Введите время' showNow={false} style={{ width: \"100%\" }} />\r\n                           </Form.Item>\r\n\r\n                           <DeleteOutlined style={{ fontSize: '1.2rem', margin: '0 0 1rem 0' }} onClick={() => remove(field.name)} />\r\n                        </>\r\n                     ))}\r\n\r\n                     <Form.Item>\r\n                        <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                           Добавить активность\r\n                        </Button>\r\n                     </Form.Item>\r\n                  </>\r\n               )}\r\n            </Form.List>\r\n            <Form.Item>\r\n               <Button type=\"primary\" htmlType=\"submit\">\r\n                  {submitBtnText}\r\n               </Button>\r\n            </Form.Item>\r\n         </Form >\r\n      </Card >\r\n   )\r\n}\r\n\r\nexport default NotesForm","import React, { useCallback, useMemo } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useAppSelector } from '../app/hooks'\r\nimport { selectNoteById, useDeleteNoteMutation, useUpdateNoteMutation } from '../features/notes/notesApiSlice'\r\nimport { Col, Row, Typography } from 'antd';\r\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport { selectActivitiesByNoteId, useAddActivityMutation, useDeleteActivityMutation, useUpdateActivityMutation } from '../features/activities/activitiesApiSlice';\r\nimport { selectTodosByNoteId, useAddTodoMutation, useDeleteTodoMutation, useUpdateTodoMutation } from '../features/todos/todosApiSlice';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport NotesForm from '../features/notes/NotesForm';\r\n\r\nconst { Paragraph, Text } = Typography\r\n\r\n\r\nconst EditNotePage: React.FC = () => {\r\n\r\n   const { noteId } = useParams()\r\n\r\n   const note = useAppSelector((state) => {\r\n      if (noteId) return selectNoteById(state, noteId)\r\n   })\r\n\r\n   const todos = useAppSelector((state) => {\r\n      if (note) return selectTodosByNoteId(state, note.noteId)\r\n   })\r\n   const activities = useAppSelector((state) => {\r\n      if (note) return selectActivitiesByNoteId(state, note.noteId)\r\n   })\r\n\r\n   const navigate = useNavigate()\r\n\r\n   const [deleteNote] = useDeleteNoteMutation()\r\n   const [updateNote] = useUpdateNoteMutation()\r\n\r\n   const [addTodo] = useAddTodoMutation()\r\n   const [updateTodo] = useUpdateTodoMutation()\r\n   const [deleteTodo] = useDeleteTodoMutation()\r\n\r\n   const [addActivity] = useAddActivityMutation()\r\n   const [updateActivity] = useUpdateActivityMutation()\r\n   const [deleteActivity] = useDeleteActivityMutation()\r\n\r\n   const userId = useAppSelector((state) => state.auth.userId)\r\n\r\n   const onDeleteNoteClick = useCallback(async (userId: string, noteId: string) => {\r\n      await deleteNote({ userId, noteId })\r\n      if (todos) await Promise.all(todos.map(todo => deleteTodo({ userId, todoId: todo.todoId })))\r\n      if (activities) await Promise.all(activities.map(act => deleteActivity({ userId, activityId: act.id })))\r\n      //firebaseDeletePhotosFolderbyNoteId(noteId)\r\n      navigate(-1)\r\n   }, [userId, noteId])\r\n\r\n   const cardActions = useMemo(() => [\r\n      <div className='card-actionsWrapper'\r\n         onClick={() => {\r\n            if (userId && noteId) onDeleteNoteClick(userId, noteId)\r\n         }}\r\n      >\r\n         <DeleteOutlined key=\"delete\" />\r\n         <span>Удалить</span>\r\n      </div>,\r\n      <div className='card-actionsWrapper'\r\n         onClick={() => { navigate(-1) }}\r\n      >\r\n         <EditOutlined key=\"edit\" />\r\n         <span>Назад</span>\r\n      </div>,\r\n   ], [userId, noteId])\r\n\r\n   const onFinish = useCallback(async (values: any) => {\r\n      if (userId) {\r\n         const updatedNote = {\r\n            title: values.title,\r\n            text: values.text,\r\n            noteDateString: values.date.format('DD/MM/YYYY'),\r\n            noteId\r\n         }\r\n         await updateNote({ userId, updatedNote })\r\n         if (values.todos) {\r\n            await Promise.all(values.todos.map((todo: any) => {\r\n               if (!todo.todoId) {\r\n                  const newTodo = {\r\n                     todoId: `Todo_${nanoid()}`,\r\n                     noteId: noteId,\r\n                     text: todo.text\r\n                  }\r\n                  addTodo({ userId, newTodo })\r\n               } else {\r\n                  updateTodo({ userId, todo })\r\n               }\r\n            }))\r\n            if (todos) {\r\n               await Promise.all(todos.map((prevTodo) => {\r\n                  const findTodo = values.todos.find((todo: any) => todo.todoId = prevTodo.todoId)\r\n                  if (!findTodo) deleteTodo({ userId, id: prevTodo.todoId })\r\n               }))\r\n            }\r\n         }\r\n         if (values.activities) {\r\n            await Promise.all(values.activities.map((activity: any) => {\r\n               if (!activity.id) {\r\n                  const newActivity = {\r\n                     id: `Activity_${nanoid()}`,\r\n                     noteId: noteId,\r\n                     eatTime: activity.eatTime.format('HH:mm'),\r\n                     endSleep: activity.endSleep.format('HH:mm'),\r\n                     startSleep: activity.startSleep.format('HH:mm'),\r\n                     eatAmount: activity.eatAmount\r\n                  }\r\n                  addActivity({ userId, newActivity })\r\n               } else {\r\n                  const updatedActivity = {\r\n                     ...activity,\r\n                     eatTime: activity.eatTime.format('HH:mm'),\r\n                     endSleep: activity.endSleep.format('HH:mm'),\r\n                     startSleep: activity.startSleep.format('HH:mm'),\r\n                  }\r\n                  updateActivity({ userId, updatedActivity })\r\n               }\r\n            }))\r\n            if (activities) {\r\n               await Promise.all(activities.map((prevAct) => {\r\n                  const findTodo = values.activities.find((act: any) => act.id = prevAct.id)\r\n                  if (!findTodo) deleteActivity({ userId, id: prevAct.id })\r\n               }))\r\n            }\r\n         }\r\n         navigate(-1)\r\n      }\r\n   }, [])\r\n\r\n   let content = note\r\n      ? <NotesForm\r\n         onFinish={onFinish}\r\n         note={note}\r\n         todos={todos}\r\n         activities={activities}\r\n         cardActions={cardActions}\r\n         cardTitle={'Отредактировать:'}\r\n         submitBtnText='Сохранить изменения'\r\n      />\r\n      : <Paragraph style={{ textAlign: 'center' }}><Text type='secondary' strong>Запись не найдена!</Text></Paragraph>\r\n\r\n   return (\r\n      <Row justify='center' align='middle' className='mh100 formWrapperPadding'>\r\n         <Col xs={24} md={12}>{content}</Col>\r\n      </Row>\r\n   )\r\n}\r\n\r\nexport default EditNotePage"],"names":["Title","Typography","onFinish","note","todos","activities","cardActions","cardTitle","submitBtnText","hoverable","bordered","style","width","actions","title","initialValues","date","moment","noteDateString","map","todo","act","endSleep","eatTime","startSleep","name","rules","required","message","placeholder","onChange","format","level","className","fields","add","remove","errors","field","index","label","validateTrigger","whitespace","noStyle","length","marginLeft","fontSize","onClick","key","type","icon","marginTop","showNow","min","step","margin","block","htmlType","Paragraph","Text","noteId","useParams","useAppSelector","state","selectNoteById","selectTodosByNoteId","selectActivitiesByNoteId","navigate","useNavigate","useDeleteNoteMutation","deleteNote","useUpdateNoteMutation","updateNote","useAddTodoMutation","addTodo","useUpdateTodoMutation","updateTodo","useDeleteTodoMutation","deleteTodo","useAddActivityMutation","addActivity","useUpdateActivityMutation","updateActivity","useDeleteActivityMutation","deleteActivity","userId","auth","onDeleteNoteClick","useCallback","Promise","all","todoId","activityId","id","useMemo","values","updatedNote","text","newTodo","nanoid","prevTodo","find","activity","updatedActivity","newActivity","eatAmount","prevAct","content","textAlign","strong","justify","align","xs","md"],"sourceRoot":""}